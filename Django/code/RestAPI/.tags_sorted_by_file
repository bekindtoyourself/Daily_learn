execute_from_command_line	manage.py	/^        from django.core.management import execute_from_command_line$/;"	i
os	manage.py	/^import os$/;"	i
sys	manage.py	/^import sys$/;"	i
admin	snippets\admin.py	/^from django.contrib import admin$/;"	i
AppConfig	snippets\apps.py	/^from django.apps import AppConfig$/;"	i
SnippetsConfig	snippets\apps.py	/^class SnippetsConfig(AppConfig):$/;"	c
name	snippets\apps.py	/^    name = 'snippets'$/;"	v	class:SnippetsConfig
LANGUAGE_CHOICES	snippets\models.py	/^LANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS])$/;"	v
LEXERS	snippets\models.py	/^LEXERS = [item for item in get_all_lexers() if item[1]]$/;"	v
Meta	snippets\models.py	/^    class Meta:$/;"	c	class:Snippet
STYLE_CHOICES	snippets\models.py	/^STYLE_CHOICES = sorted((item, item) for item in get_all_styles())$/;"	v
Snippet	snippets\models.py	/^class Snippet(models.Model):$/;"	c
code	snippets\models.py	/^    code = models.TextField()$/;"	v	class:Snippet
created	snippets\models.py	/^    created = models.DateTimeField(auto_now_add=True)$/;"	v	class:Snippet
get_all_lexers	snippets\models.py	/^from pygments.lexer import get_all_lexers$/;"	i
get_all_styles	snippets\models.py	/^from pygments.styles import get_all_styles$/;"	i
language	snippets\models.py	/^    language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100)$/;"	v	class:Snippet
linenos	snippets\models.py	/^    linenos = models.BooleanField(default=False)$/;"	v	class:Snippet
models	snippets\models.py	/^from django.db import models$/;"	i
ordering	snippets\models.py	/^        ordering = ('created',)$/;"	v	class:Snippet.Meta
style	snippets\models.py	/^    style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100)$/;"	v	class:Snippet
title	snippets\models.py	/^    title = models.CharField(max_length=100, blank=True, default='')$/;"	v	class:Snippet
TestCase	snippets\tests.py	/^from django.test import TestCase$/;"	i
render	snippets\views.py	/^from django.shortcuts import render$/;"	i
admin	tutorial\quickstart\admin.py	/^from django.contrib import admin$/;"	i
AppConfig	tutorial\quickstart\apps.py	/^from django.apps import AppConfig$/;"	i
QuickstartConfig	tutorial\quickstart\apps.py	/^class QuickstartConfig(AppConfig):$/;"	c
name	tutorial\quickstart\apps.py	/^    name = 'quickstart'$/;"	v	class:QuickstartConfig
models	tutorial\quickstart\models.py	/^from django.db import models$/;"	i
Group	tutorial\quickstart\serializers.py	/^from django.contrib.auth.models import User, Group$/;"	i
GroupSerializer	tutorial\quickstart\serializers.py	/^class GroupSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
Meta	tutorial\quickstart\serializers.py	/^    class Meta:$/;"	c	class:GroupSerializer
Meta	tutorial\quickstart\serializers.py	/^    class Meta:$/;"	c	class:UserSerializer
User	tutorial\quickstart\serializers.py	/^from django.contrib.auth.models import User, Group$/;"	i
UserSerializer	tutorial\quickstart\serializers.py	/^class UserSerializer(serializers.HyperlinkedModelSerializer):$/;"	c
fields	tutorial\quickstart\serializers.py	/^        fields = ('url', 'name')$/;"	v	class:GroupSerializer.Meta
fields	tutorial\quickstart\serializers.py	/^        fields = ('url', 'username', 'email', 'groups')$/;"	v	class:UserSerializer.Meta
model	tutorial\quickstart\serializers.py	/^        model = Group$/;"	v	class:GroupSerializer.Meta
model	tutorial\quickstart\serializers.py	/^        model = User$/;"	v	class:UserSerializer.Meta
serializers	tutorial\quickstart\serializers.py	/^from rest_framework import serializers$/;"	i
TestCase	tutorial\quickstart\tests.py	/^from django.test import TestCase$/;"	i
Group	tutorial\quickstart\views.py	/^from django.contrib.auth.models import User, Group$/;"	i
GroupSerializer	tutorial\quickstart\views.py	/^from tutorial.quickstart.serializers import UserSerializer, GroupSerializer$/;"	i
GroupViewSet	tutorial\quickstart\views.py	/^class GroupViewSet(viewsets.ModelViewSet):$/;"	c
User	tutorial\quickstart\views.py	/^from django.contrib.auth.models import User, Group$/;"	i
UserSerializer	tutorial\quickstart\views.py	/^from tutorial.quickstart.serializers import UserSerializer, GroupSerializer$/;"	i
UserViewSet	tutorial\quickstart\views.py	/^class UserViewSet(viewsets.ModelViewSet):$/;"	c
queryset	tutorial\quickstart\views.py	/^    queryset = Group.objects.all()$/;"	v	class:GroupViewSet
queryset	tutorial\quickstart\views.py	/^    queryset = User.objects.all().order_by('-date_joined')$/;"	v	class:UserViewSet
render	tutorial\quickstart\views.py	/^from django.shortcuts import render$/;"	i
serializers_class	tutorial\quickstart\views.py	/^    serializers_class = GroupSerializer/;"	v	class:GroupViewSet
serializers_class	tutorial\quickstart\views.py	/^    serializers_class = UserSerializer$/;"	v	class:UserViewSet
viewsets	tutorial\quickstart\views.py	/^from rest_framework import viewsets$/;"	i
ALLOWED_HOSTS	tutorial\settings.py	/^ALLOWED_HOSTS = []$/;"	v
AUTH_PASSWORD_VALIDATORS	tutorial\settings.py	/^AUTH_PASSWORD_VALIDATORS = [$/;"	v
BASE_DIR	tutorial\settings.py	/^BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))$/;"	v
DATABASES	tutorial\settings.py	/^DATABASES = {$/;"	v
DEBUG	tutorial\settings.py	/^DEBUG = True$/;"	v
INSTALLED_APPS	tutorial\settings.py	/^INSTALLED_APPS = [$/;"	v
LANGUAGE_CODE	tutorial\settings.py	/^LANGUAGE_CODE = 'en-us'$/;"	v
MIDDLEWARE	tutorial\settings.py	/^MIDDLEWARE = [$/;"	v
REST_FRAMEWORK	tutorial\settings.py	/^REST_FRAMEWORK = {$/;"	v
ROOT_URLCONF	tutorial\settings.py	/^ROOT_URLCONF = 'tutorial.urls'$/;"	v
SECRET_KEY	tutorial\settings.py	/^SECRET_KEY = 'ert4g8@0dyurzy(^s92ci!1+ewgo4*_a2=7*$1hk_dy6%gj^-p'$/;"	v
STATIC_URL	tutorial\settings.py	/^STATIC_URL = '\/static\/'$/;"	v
TEMPLATES	tutorial\settings.py	/^TEMPLATES = [$/;"	v
TIME_ZONE	tutorial\settings.py	/^TIME_ZONE = 'UTC'$/;"	v
USE_I18N	tutorial\settings.py	/^USE_I18N = True$/;"	v
USE_L10N	tutorial\settings.py	/^USE_L10N = True$/;"	v
USE_TZ	tutorial\settings.py	/^USE_TZ = True$/;"	v
WSGI_APPLICATION	tutorial\settings.py	/^WSGI_APPLICATION = 'tutorial.wsgi.application'$/;"	v
os	tutorial\settings.py	/^import os$/;"	i
admin	tutorial\urls.py	/^from django.contrib import admin$/;"	i
include	tutorial\urls.py	/^from django.conf.urls import url, include$/;"	i
path	tutorial\urls.py	/^from django.urls import path$/;"	i
router	tutorial\urls.py	/^router = routers.DefaultRouter()$/;"	v
routers	tutorial\urls.py	/^from rest_framework import routers$/;"	i
url	tutorial\urls.py	/^from django.conf.urls import url, include$/;"	i
urlpatterns	tutorial\urls.py	/^urlpatterns = [$/;"	v
views	tutorial\urls.py	/^from tutorial.quickstart import views$/;"	i
application	tutorial\wsgi.py	/^application = get_wsgi_application()$/;"	v
get_wsgi_application	tutorial\wsgi.py	/^from django.core.wsgi import get_wsgi_application$/;"	i
os	tutorial\wsgi.py	/^import os$/;"	i
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
